{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","console","log","state","rekt","huehue","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6UAGaA,G,kBAAO,SAAAC,GAAK,OACzB,yBAAKC,UAAU,kBACf,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAML,EAAMI,QAAQE,MACpB,2BAAKN,EAAMI,QAAQG,UCHNC,EAAW,SAAAR,GAAK,OAC7B,yBAAKC,UAAU,aACdD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCJvBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOb,UAAU,SAASc,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCyCjEG,E,kDAvCf,aAAc,IAAD,8BACb,gBAkBAH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,QAAQ,kBAAMC,QAAQC,IAAI,EAAKC,WAjBtE,EAAKA,MAAQ,CACXC,KAAM,UACNC,OAAQ,gBAGV,EAAKF,MAAQ,CACXhB,SAAU,CACR,CAACH,KAAM,MAAOC,MAAO,gBAAiBF,GAAG,GACzC,CAACC,KAAM,QAASC,MAAO,kBAAmBF,GAAG,GAC7C,CAACC,KAAM,SAAUC,MAAO,mBAAoBF,GAAG,IACjDe,YAAa,IAbF,E,gEAuBO,IAAD,OACjBQ,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACV,SAAWuB,S,+BAIpH,IAAD,EAC2BC,KAAKR,MAA/BhB,EADD,EACCA,SAAUW,EADX,EACWA,YACZc,EAAmBzB,EAAS0B,QAAO,SAAA/B,GAAO,OAAIA,EAAQE,KAAK8B,cAAcC,SAASjB,EAAYgB,kBACpG,OAAQ,yBAAKnC,UAAU,OACvB,gDACJ,kBAAC,EAAD,CAAWY,YAAY,uBAAuBC,aAAcmB,KAAKnB,eAC7D,kBAAC,EAAD,CAAUL,SAAUyB,S,GAnCNI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.e54a2d4f.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n<div className='card-container'>\r\n<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x250`} />\r\n<h2>{ props.monster.name }</h2>\r\n<p>{ props.monster.email }</p>\r\n</div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component.jsx'\r\n\r\nexport const CardList = props => (\r\n<div className='card-list'>\r\n{props.monsters.map(monster => (\r\n    <Card key={monster.id} monster={monster}/>\r\n    ))}\r\n</div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component.jsx';\n\nclass App extends Component {\nconstructor(){\nsuper();\n\nthis.state = {\n  rekt: 'moneehz',\n  huehue: 'boisboisbois'\n}\n\nthis.state = {\n  monsters: [\n    {name: \"bob\", email: \"bob@gmail.com\", id:2},\n    {name: \"benny\", email: \"benny@gmail.com\", id:3},\n    {name: \"bertha\", email: \"bertha@gmail.com\", id:4}],\n  searchField: ''\n};\n\n\n}\n\nhandleChange = (e) => {\n  this.setState({searchField: e.target.value}, () => console.log(this.state));\n}\n\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters : users}));\n  \n  }\n\n  render (){\n    const { monsters, searchField } = this.state; //Fetcher variablerne fra state som destructured elementer. På den måde er de frakoblet det oprindelig objekt og vi ændrer kun klonen.\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (<div className=\"App\">\n    <h1>Monsters Rolodex</h1>\n<SearchBox placeholder=\"Click here to search\" handleChange={this.handleChange}/>\n    <CardList monsters={filteredMonsters} />\n  </div>\n    )};\n}\n\nexport default App;\n\n\n// <header className=\"App-header\">\n// <img src={logo} className=\"App-logo\" alt=\"logo\" />\n// <p>\n//   Edit <code>src/App.js</code> and save to reload.\n//   Hello bois, {this.state.huehue}, {this.state.rekt}\n//   <button onClick={() => this.setState({rekt: 'dododouuuble reekt bois'})}>test</button>\n\n  \n// </p>\n\n\n// <a\n//   className=\"App-link\"\n//   href=\"https://reactjs.org\"\n//   target=\"_blank\"\n//   rel=\"noopener noreferrer\"\n// >\n//   Learn React\n// </a>\n// </header>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}